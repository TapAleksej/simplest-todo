pipeline {	
	agent any	
	environment {
		PRJ_NAME="simplest-todo"
		FULL_IMG_NAME="alrexcom/${env.PRJ_NAME}"
		IMG_NAME="${env.PRJ_NAME}"
		WORKSPACEPATH="${WORKSPACE}/${env.PRJ_NAME}"
		GIT_URL="git@github.com:TapAleksej/simplest-todo.git"

	}
	parameters {
		booleanParam(name: 'RUN_TEST', defaultValue: true, description: 'Run test?' )
		booleanParam(name: 'BUILD_IMAGE', defaultValue: true, description: 'Build image?' )
		string(name: 'IMAGE_TAG', defaultValue: 'latest')	
		booleanParam(name: 'PUSH_IMG', defaultValue: true, description: 'push image to docker hub?' )		
	}
	stages {
	
		stage('initialize') {
			steps {
				echo "Start testing ToDo app; Build #${BUILD_NUMBER}"
			}
		}
		stage('checkout') {
			steps {
				script {					

                    sh """
                        if [ -d "${WORKSPACEPATH}/.git" ]; then
                            echo "Repository exists. Updating ..."
                            cd "${WORKSPACEPATH}"
                            git pull
                        else
                            echo "Cloning repository ..."
                            git clone ${GIT_URL} "${WORKSPACEPATH}"
                        fi 
					"""
				}	
			}		
		}			
		stage('test') {
			when {
				expression { params.RUN_TEST == true}
			}
			steps {
				script {
					sh """
						phpunit --log-junit test-results.xml
					"""
				}			
			}			
		}
		stage('finish') {
			steps {
				echo "Tests finished"			
			}
		}	
		stage('build image') {
			when {
				expression { params.BUILD_IMAGE == true}
			}
			steps {
				script {
					sh """						
						cd "${WORKSPACEPATH}"						
						docker build -t "${IMG_NAME}":${params.IMAGE_TAG} .	 --no-cache						
					"""
				}
			
			}			
		}	
		stage('push image to docker hub') {
			when {
				expression { params.PUSH_IMG == true}
			}
			steps {
				script {
					def push = { ->						
						withCredentials([usernamePassword(credentialsId: 'docker-token', usernameVariable: 'username', passwordVariable: 'password')]) {
								sh  """																			
									docker login -u ${username} -p ${password}
									docker tag "${IMG_NAME}":${params.IMAGE_TAG} "${FULL_IMG_NAME}":${params.IMAGE_TAG}						
									docker push "${FULL_IMG_NAME}":${params.IMAGE_TAG}										
								"""								
						}		
					}				
				
                    push()	
				}				
			}
		}		
		stage('Clean') {
				steps {
					script {
						sh """
							cd "${WORKSPACEPATH}"							
							docker images -qa | xargs docker rmi -f
							rm -rf "${WORKSPACEPATH}"							
						"""
					}
				}				
		}
		
		stage('Call Deploy Job') {	
		  steps {
			script {
			  build quietPeriod: 5, wait: false, job: 'hw29-deploy', parameters: [string(name: 'FULL_IMG_NAME', value: "${FULL_IMG_NAME}:${params.IMAGE_TAG}")]			  
			}
		  }
		}		
	}		
}						
